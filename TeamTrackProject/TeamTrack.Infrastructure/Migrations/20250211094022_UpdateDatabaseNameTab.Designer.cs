// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamTrack.Infrastructure;

#nullable disable

namespace TeamTrack.Infrastructure.Migrations
{
    [DbContext(typeof(TeamTrackDbContext))]
    [Migration("20250211094022_UpdateDatabaseNameTab")]
    partial class UpdateDatabaseNameTab
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProgettiUtente", b =>
                {
                    b.Property<int>("IdProgetto")
                        .HasColumnType("int");

                    b.Property<int>("IdUtente")
                        .HasColumnType("int");

                    b.HasKey("IdProgetto", "IdUtente");

                    b.HasIndex("IdUtente");

                    b.ToTable("ProgettiUtente");
                });

            modelBuilder.Entity("TaskProgettoUtente", b =>
                {
                    b.Property<int>("AttivitaId")
                        .HasColumnType("int");

                    b.Property<int>("UtentiId")
                        .HasColumnType("int");

                    b.HasKey("AttivitaId", "UtentiId");

                    b.HasIndex("UtentiId");

                    b.ToTable("TaskProgettoUtente");
                });

            modelBuilder.Entity("TeamTrack.Domain.Entity.Progetto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("CodiceAccesso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataFineProgetto")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizioProgetto")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Progetti");
                });

            modelBuilder.Entity("TeamTrack.Domain.Entity.TaskProgetto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataFineTask")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizioTask")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdProgetto")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrioritàTask")
                        .HasColumnType("int");

                    b.Property<int?>("StatoTask")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProgetto");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TeamTrack.Domain.Entity.Utente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ruolo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Utenti");
                });

            modelBuilder.Entity("ProgettiUtente", b =>
                {
                    b.HasOne("TeamTrack.Domain.Entity.Progetto", null)
                        .WithMany()
                        .HasForeignKey("IdProgetto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamTrack.Domain.Entity.Utente", null)
                        .WithMany()
                        .HasForeignKey("IdUtente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskProgettoUtente", b =>
                {
                    b.HasOne("TeamTrack.Domain.Entity.TaskProgetto", null)
                        .WithMany()
                        .HasForeignKey("AttivitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamTrack.Domain.Entity.Utente", null)
                        .WithMany()
                        .HasForeignKey("UtentiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamTrack.Domain.Entity.Progetto", b =>
                {
                    b.HasOne("TeamTrack.Domain.Entity.Utente", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("TeamTrack.Domain.Entity.TaskProgetto", b =>
                {
                    b.HasOne("TeamTrack.Domain.Entity.Progetto", "Progetto")
                        .WithMany("Tasks")
                        .HasForeignKey("IdProgetto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Progetto");
                });

            modelBuilder.Entity("TeamTrack.Domain.Entity.Progetto", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
