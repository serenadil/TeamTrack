@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@section Scripts {
    <script>
        function getCookie(name) {
            let decodedCookie = decodeURIComponent(document.cookie);
            let ca = decodedCookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i].trim();
                if (c.indexOf(name + "=") === 0) {
                    return c.substring(name.length + 1, c.length);
                }
            }
            return "";
        }





               async function getProgettoTaskGraph(progettoId) {
            const userId = getCookie('userId');
            if (!userId) {
                window.location.href = "/Aut/Login";
                return;
            }

            try {
                console.log("Recupero task per il progetto:", progettoId);
              
                // Chiamata API per ottenere le task del progetto
                const tasksResponse = await fetch(`/api/TaskProgetto/progetto/${progettoId}`);
                if (!tasksResponse.ok) {
                    console.error("Errore nel recupero delle task:", tasksResponse.statusText);
                    return;
                }

                const tasks = await tasksResponse.json();
                console.log("Task recuperate:", tasks);

                // Contatori per gli stati delle task
                let daFare = 0, inCorso = 0, completate = 0;

                // Conta le task in base allo stato
                tasks.forEach((task, index) => {
                    if (!task.statoTask) {
                        console.warn(`⚠️ Task #${index} senza stato`, task);
                        return;
                    }

                    switch (task.statoTask) {
                        case 0: 
                            daFare++;
                            break;
                        case 1: 
                            inCorso++;
                            break;
                        case 2:
                            completate++;
                            break;
                        default:
                            console.warn(`❓ Stato sconosciuto per Task #${index}:`, task.statoTask);
                    }
                });

                console.log(`Conteggio task - DaFare: ${daFare}, InCorso: ${inCorso}, Completate: ${completate}`);

              
                const apiUrl = `/api/QuickChart/pie?daFare=${daFare}&inCorso=${inCorso}&completate=${completate}`;
                console.log("API URL per il grafico a torta:", apiUrl);

               
                const chartResponse = await fetch(apiUrl);
                if (!chartResponse.ok) {
                    console.error("Errore nella richiesta API per il grafico:", chartResponse.statusText);
                    return;
                }

                
                const imageArrayBuffer = await chartResponse.arrayBuffer();
                const base64String = arrayBufferToBase64(imageArrayBuffer);

              
                const img = document.createElement('img');
                img.src = `data:image/png;base64,${base64String}`;
                img.alt = "Grafico stato task";
                img.style.maxWidth = '100%';

                document.getElementById('chartContainer').innerHTML = ''; 
                document.getElementById('chartContainer').appendChild(img);
            } catch (error) {
                console.error("Errore nella richiesta API:", error);
            }
        }

        // Funzione per convertire l'ArrayBuffer in base64
        function arrayBufferToBase64(buffer) {
            let binary = '';
            const bytes = new Uint8Array(buffer);
            for (let i = 0; i < bytes.byteLength; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        }

    </script>
}